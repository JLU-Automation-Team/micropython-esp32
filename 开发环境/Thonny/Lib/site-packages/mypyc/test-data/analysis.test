-- Test cases for data flow analysis.

[case testSimple_MaybeDefined]
def f(a: int) -> None:
    x = 1
    if x == a:
        y = 1
    else:
        z = 1
[out]
def f(a):
    a, x :: int
    r0 :: bool
    r1 :: native_int
    r2, r3, r4 :: bool
    y, z :: int
L0:
    x = 2
    r1 = x & 1
    r2 = r1 == 0
    if r2 goto L1 else goto L2 :: bool
L1:
    r3 = x == a
    r0 = r3
    goto L3
L2:
    r4 = CPyTagged_IsEq_(x, a)
    r0 = r4
L3:
    if r0 goto L4 else goto L5 :: bool
L4:
    y = 2
    goto L6
L5:
    z = 2
L6:
    return 1
(0, 0)   {a}                     {a}
(0, 1)   {a}                     {a, x}
(0, 2)   {a, x}                  {a, x}
(0, 3)   {a, x}                  {a, x}
(0, 4)   {a, x}                  {a, x}
(0, 5)   {a, x}                  {a, x}
(0, 6)   {a, x}                  {a, x}
(1, 0)   {a, x}                  {a, x}
(1, 1)   {a, x}                  {a, r0, x}
(1, 2)   {a, r0, x}              {a, r0, x}
(2, 0)   {a, x}                  {a, x}
(2, 1)   {a, x}                  {a, r0, x}
(2, 2)   {a, r0, x}              {a, r0, x}
(3, 0)   {a, r0, x}              {a, r0, x}
(4, 0)   {a, r0, x}              {a, r0, x}
(4, 1)   {a, r0, x}              {a, r0, x, y}
(4, 2)   {a, r0, x, y}           {a, r0, x, y}
(5, 0)   {a, r0, x}              {a, r0, x}
(5, 1)   {a, r0, x}              {a, r0, x, z}
(5, 2)   {a, r0, x, z}           {a, r0, x, z}
(6, 0)   {a, r0, x, y, z}        {a, r0, x, y, z}
(6, 1)   {a, r0, x, y, z}        {a, r0, x, y, z}

[case testSimple_Liveness]
def f(a: int) -> int:
    x = 1
    if x == 1:
        return a
    else:
        return x
[out]
def f(a):
    a, x :: int
    r0 :: bool
    r1 :: native_int
    r2, r3, r4 :: bool
L0:
    x = 2
    r1 = x & 1
    r2 = r1 == 0
    if r2 goto L1 else goto L2 :: bool
L1:
    r3 = x == 2
    r0 = r3
    goto L3
L2:
    r4 = CPyTagged_IsEq_(x, 2)
    r0 = r4
L3:
    if r0 goto L4 else goto L5 :: bool
L4:
    return a
L5:
    return x
L6:
    unreachable
(0, 0)   {a}                     {a, i0}
(0, 1)   {a, i0}                 {a, x}
(0, 2)   {a, x}                  {a, i1, x}
(0, 3)   {a, i1, x}              {a, i1, i2, x}
(0, 4)   {a, i1, i2, x}          {a, i1, r1, x}
(0, 5)   {a, i1, r1, x}          {a, i1, i3, r1, x}
(0, 6)   {a, i1, i3, r1, x}      {a, i1, r2, x}
(0, 7)   {a, i1, r2, x}          {a, i1, x}
(1, 0)   {a, i1, x}              {a, r3, x}
(1, 1)   {a, r3, x}              {a, r0, x}
(1, 2)   {a, r0, x}              {a, r0, x}
(2, 0)   {a, i1, x}              {a, r4, x}
(2, 1)   {a, r4, x}              {a, r0, x}
(2, 2)   {a, r0, x}              {a, r0, x}
(3, 0)   {a, r0, x}              {a, x}
(4, 0)   {a}                     {}
(5, 0)   {x}                     {}
(6, 0)   {}                      {}

[case testSpecial_Liveness]
def f() -> int:
    x = 1
    y = 1
    x = 2
    return x
[out]
def f():
    x, y :: int
L0:
    x = 2
    y = 2
    x = 4
    return x
(0, 0)   {}                      {i0}
(0, 1)   {i0}                    {}
(0, 2)   {}                      {i1}
(0, 3)   {i1}                    {}
(0, 4)   {}                      {i2}
(0, 5)   {i2}                    {x}
(0, 6)   {x}                     {}

[case testSpecial2_Liveness]
def f(a: int) -> int:
    a = 1
    a = 2
    a = 3
    return a
[out]
def f(a):
    a :: int
L0:
    a = 2
    a = 4
    a = 6
    return a
(0, 0)   {}                      {i0}
(0, 1)   {i0}                    {}
(0, 2)   {}                      {i1}
(0, 3)   {i1}                    {}
(0, 4)   {}                      {i2}
(0, 5)   {i2}                    {a}
(0, 6)   {a}                     {}

[case testSimple_MustDefined]
def f(a: int) -> None:
    if a == 1:
        y = 1
        x = 2
    else:
        x = 2
[out]
def f(a):
    a :: int
    r0 :: bool
    r1 :: native_int
    r2, r3, r4 :: bool
    y, x :: int
L0:
    r1 = a & 1
    r2 = r1 == 0
    if r2 goto L1 else goto L2 :: bool
L1:
    r3 = a == 2
    r0 = r3
    goto L3
L2:
    r4 = CPyTagged_IsEq_(a, 2)
    r0 = r4
L3:
    if r0 goto L4 else goto L5 :: bool
L4:
    y = 2
    x = 4
    goto L6
L5:
    x = 4
L6:
    return 1
(0, 0)   {a}                     {a}
(0, 1)   {a}                     {a}
(0, 2)   {a}                     {a}
(0, 3)   {a}                     {a}
(0, 4)   {a}                     {a}
(0, 5)   {a}                     {a}
(1, 0)   {a}                     {a}
(1, 1)   {a}                     {a, r0}
(1, 2)   {a, r0}                 {a, r0}
(2, 0)   {a}                     {a}
(2, 1)   {a}                     {a, r0}
(2, 2)   {a, r0}                 {a, r0}
(3, 0)   {a, r0}                 {a, r0}
(4, 0)   {a, r0}                 {a, r0}
(4, 1)   {a, r0}                 {a, r0, y}
(4, 2)   {a, r0, y}              {a, r0, y}
(4, 3)   {a, r0, y}              {a, r0, x, y}
(4, 4)   {a, r0, x, y}           {a, r0, x, y}
(5, 0)   {a, r0}                 {a, r0}
(5, 1)   {a, r0}                 {a, r0, x}
(5, 2)   {a, r0, x}              {a, r0, x}
(6, 0)   {a, r0, x}              {a, r0, x}
(6, 1)   {a, r0, x}              {a, r0, x}

[case testTwoArgs_MustDefined]
def f(x: int, y: int) -> int:
    return x
[out]
def f(x, y):
    x, y :: int
L0:
    return x
(0, 0)   {x, y}                  {x, y}

[case testLoop_MustDefined]
def f(n: int) -> None:
    while n < 5:
        n = n + 1
        m = n
[out]
def f(n):
    n :: int
    r0 :: bool
    r1 :: native_int
    r2 :: bool
    r3 :: native_int
    r4, r5, r6, r7 :: bool
    r8, m :: int
L0:
L1:
    r1 = n & 1
    r2 = r1 == 0
    r3 = 10 & 1
    r4 = r3 == 0
    r5 = r2 & r4
    if r5 goto L2 else goto L3 :: bool
L2:
    r6 = n < 10 :: signed
    r0 = r6
    goto L4
L3:
    r7 = CPyTagged_IsLt_(n, 10)
    r0 = r7
L4:
    if r0 goto L5 else goto L6 :: bool
L5:
    r8 = CPyTagged_Add(n, 2)
    n = r8
    m = n
    goto L1
L6:
    return 1
(0, 0)   {n}                     {n}
(1, 0)   {n}                     {n}
(1, 1)   {n}                     {n}
(1, 2)   {n}                     {n}
(1, 3)   {n}                     {n}
(1, 4)   {n}                     {n}
(1, 5)   {n}                     {n}
(1, 6)   {n}                     {n}
(1, 7)   {n}                     {n}
(1, 8)   {n}                     {n}
(1, 9)   {n}                     {n}
(1, 10)  {n}                     {n}
(2, 0)   {n}                     {n}
(2, 1)   {n}                     {n, r0}
(2, 2)   {n, r0}                 {n, r0}
(3, 0)   {n}                     {n}
(3, 1)   {n}                     {n, r0}
(3, 2)   {n, r0}                 {n, r0}
(4, 0)   {n, r0}                 {n, r0}
(5, 0)   {n, r0}                 {n, r0}
(5, 1)   {n, r0}                 {n, r0}
(5, 2)   {n, r0}                 {n, r0}
(5, 3)   {n, r0}                 {m, n, r0}
(5, 4)   {m, n, r0}              {m, n, r0}
(6, 0)   {n, r0}                 {n, r0}
(6, 1)   {n, r0}                 {n, r0}

[case testMultiPass_Liveness]
def f(n: int) -> None:
    x = 1
    y = 1
    while n < 1:
        n = y
        while n < 2:
            n = 1
            n = x
[out]
def f(n):
    n, x, y :: int
    r0 :: bool
    r1 :: native_int
    r2 :: bool
    r3 :: native_int
    r4, r5, r6, r7, r8 :: bool
    r9 :: native_int
    r10 :: bool
    r11 :: native_int
    r12, r13, r14, r15 :: bool
L0:
    x = 2
    y = 2
L1:
    r1 = n & 1
    r2 = r1 == 0
    r3 = 2 & 1
    r4 = r3 == 0
    r5 = r2 & r4
    if r5 goto L2 else goto L3 :: bool
L2:
    r6 = n < 2 :: signed
    r0 = r6
    goto L4
L3:
    r7 = CPyTagged_IsLt_(n, 2)
    r0 = r7
L4:
    if r0 goto L5 else goto L12 :: bool
L5:
    n = y
L6:
    r9 = n & 1
    r10 = r9 == 0
    r11 = 4 & 1
    r12 = r11 == 0
    r13 = r10 & r12
    if r13 goto L7 else goto L8 :: bool
L7:
    r14 = n < 4 :: signed
    r8 = r14
    goto L9
L8:
    r15 = CPyTagged_IsLt_(n, 4)
    r8 = r15
L9:
    if r8 goto L10 else goto L11 :: bool
L10:
    n = 2
    n = x
    goto L6
L11:
    goto L1
L12:
    return 1
(0, 0)   {n}                     {i0, n}
(0, 1)   {i0, n}                 {n, x}
(0, 2)   {n, x}                  {i1, n, x}
(0, 3)   {i1, n, x}              {n, x, y}
(0, 4)   {n, x, y}               {n, x, y}
(1, 0)   {n, x, y}               {i2, n, x, y}
(1, 1)   {i2, n, x, y}           {i2, i3, n, x, y}
(1, 2)   {i2, i3, n, x, y}       {i2, n, r1, x, y}
(1, 3)   {i2, n, r1, x, y}       {i2, i4, n, r1, x, y}
(1, 4)   {i2, i4, n, r1, x, y}   {i2, n, r2, x, y}
(1, 5)   {i2, n, r2, x, y}       {i2, i5, n, r2, x, y}
(1, 6)   {i2, i5, n, r2, x, y}   {i2, n, r2, r3, x, y}
(1, 7)   {i2, n, r2, r3, x, y}   {i2, i6, n, r2, r3, x, y}
(1, 8)   {i2, i6, n, r2, r3, x, y} {i2, n, r2, r4, x, y}
(1, 9)   {i2, n, r2, r4, x, y}   {i2, n, r5, x, y}
(1, 10)  {i2, n, r5, x, y}       {i2, n, x, y}
(2, 0)   {i2, n, x, y}           {r6, x, y}
(2, 1)   {r6, x, y}              {r0, x, y}
(2, 2)   {r0, x, y}              {r0, x, y}
(3, 0)   {i2, n, x, y}           {r7, x, y}
(3, 1)   {r7, x, y}              {r0, x, y}
(3, 2)   {r0, x, y}              {r0, x, y}
(4, 0)   {r0, x, y}              {x, y}
(5, 0)   {x, y}                  {n, x, y}
(5, 1)   {n, x, y}               {n, x, y}
(6, 0)   {n, x, y}               {i7, n, x, y}
(6, 1)   {i7, n, x, y}           {i7, i8, n, x, y}
(6, 2)   {i7, i8, n, x, y}       {i7, n, r9, x, y}
(6, 3)   {i7, n, r9, x, y}       {i7, i9, n, r9, x, y}
(6, 4)   {i7, i9, n, r9, x, y}   {i7, n, r10, x, y}
(6, 5)   {i7, n, r10, x, y}      {i10, i7, n, r10, x, y}
(6, 6)   {i10, i7, n, r10, x, y} {i7, n, r10, r11, x, y}
(6, 7)   {i7, n, r10, r11, x, y} {i11, i7, n, r10, r11, x, y}
(6, 8)   {i11, i7, n, r10, r11, x, y} {i7, n, r10, r12, x, y}
(6, 9)   {i7, n, r10, r12, x, y} {i7, n, r13, x, y}
(6, 10)  {i7, n, r13, x, y}      {i7, n, x, y}
(7, 0)   {i7, n, x, y}           {n, r14, x, y}
(7, 1)   {n, r14, x, y}          {n, r8, x, y}
(7, 2)   {n, r8, x, y}           {n, r8, x, y}
(8, 0)   {i7, n, x, y}           {n, r15, x, y}
(8, 1)   {n, r15, x, y}          {n, r8, x, y}
(8, 2)   {n, r8, x, y}           {n, r8, x, y}
(9, 0)   {n, r8, x, y}           {n, x, y}
(10, 0)  {x, y}                  {i12, x, y}
(10, 1)  {i12, x, y}             {x, y}
(10, 2)  {x, y}                  {n, x, y}
(10, 3)  {n, x, y}               {n, x, y}
(11, 0)  {n, x, y}               {n, x, y}
(12, 0)  {}                      {i13}
(12, 1)  {i13}                   {}

[case testCall_Liveness]
def f(x: int) -> int:
    a = f(1)
    return f(a) + a
[out]
def f(x):
    x, r0, a, r1, r2, r3 :: int
L0:
    r0 = f(2)
    if is_error(r0) goto L3 (error at f:2) else goto L1
L1:
    a = r0
    r1 = f(a)
    if is_error(r1) goto L3 (error at f:3) else goto L2
L2:
    r2 = CPyTagged_Add(r1, a)
    return r2
L3:
    r3 = <error> :: int
    return r3
(0, 0)   {}                      {i0}
(0, 1)   {i0}                    {r0}
(0, 2)   {r0}                    {r0}
(1, 0)   {r0}                    {a}
(1, 1)   {a}                     {a, r1}
(1, 2)   {a, r1}                 {a, r1}
(2, 0)   {a, r1}                 {r2}
(2, 1)   {r2}                    {}
(3, 0)   {}                      {r3}
(3, 1)   {r3}                    {}

[case testLoop_MaybeDefined]
def f(a: int) -> None:
    while a < a:
        while a < a:
            y = a
        x = a
[out]
def f(a):
    a :: int
    r0 :: bool
    r1 :: native_int
    r2 :: bool
    r3 :: native_int
    r4, r5, r6, r7, r8 :: bool
    r9 :: native_int
    r10 :: bool
    r11 :: native_int
    r12, r13, r14, r15 :: bool
    y, x :: int
L0:
L1:
    r1 = a & 1
    r2 = r1 == 0
    r3 = a & 1
    r4 = r3 == 0
    r5 = r2 & r4
    if r5 goto L2 else goto L3 :: bool
L2:
    r6 = a < a :: signed
    r0 = r6
    goto L4
L3:
    r7 = CPyTagged_IsLt_(a, a)
    r0 = r7
L4:
    if r0 goto L5 else goto L12 :: bool
L5:
L6:
    r9 = a & 1
    r10 = r9 == 0
    r11 = a & 1
    r12 = r11 == 0
    r13 = r10 & r12
    if r13 goto L7 else goto L8 :: bool
L7:
    r14 = a < a :: signed
    r8 = r14
    goto L9
L8:
    r15 = CPyTagged_IsLt_(a, a)
    r8 = r15
L9:
    if r8 goto L10 else goto L11 :: bool
L10:
    y = a
    goto L6
L11:
    x = a
    goto L1
L12:
    return 1
(0, 0)   {a}                     {a}
(1, 0)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(1, 1)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(1, 2)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(1, 3)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(1, 4)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(1, 5)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(1, 6)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(1, 7)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(1, 8)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(1, 9)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(2, 0)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(2, 1)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(2, 2)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(3, 0)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(3, 1)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(3, 2)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(4, 0)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(5, 0)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(6, 0)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(6, 1)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(6, 2)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(6, 3)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(6, 4)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(6, 5)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(6, 6)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(6, 7)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(6, 8)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(6, 9)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(7, 0)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(7, 1)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(7, 2)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(8, 0)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(8, 1)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(8, 2)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(9, 0)   {a, r0, r8, x, y}       {a, r0, r8, x, y}
(10, 0)  {a, r0, r8, x, y}       {a, r0, r8, x, y}
(10, 1)  {a, r0, r8, x, y}       {a, r0, r8, x, y}
(11, 0)  {a, r0, r8, x, y}       {a, r0, r8, x, y}
(11, 1)  {a, r0, r8, x, y}       {a, r0, r8, x, y}
(12, 0)  {a, r0, r8, x, y}       {a, r0, r8, x, y}
(12, 1)  {a, r0, r8, x, y}       {a, r0, r8, x, y}

[case testTrivial_BorrowedArgument]
def f(a: int, b: int) -> int:
    return b
[out]
def f(a, b):
    a, b :: int
L0:
    return b
(0, 0)   {a, b}                  {a, b}

[case testSimple_BorrowedArgument]
def f(a: int) -> int:
    b = a
    a = 1
    return a
[out]
def f(a):
    a, b :: int
L0:
    b = a
    a = 2
    return a
(0, 0)   {a}                     {a}
(0, 1)   {a}                     {a}
(0, 2)   {a}                     {}
(0, 3)   {}                      {}

[case testConditional_BorrowedArgument]
def f(a: int) -> int:
    if a == a:
        x = 2
        a = 1
    else:
        x = 1
    return x
[out]
def f(a):
    a :: int
    r0 :: bool
    r1 :: native_int
    r2, r3, r4 :: bool
    x :: int
L0:
    r1 = a & 1
    r2 = r1 == 0
    if r2 goto L1 else goto L2 :: bool
L1:
    r3 = a == a
    r0 = r3
    goto L3
L2:
    r4 = CPyTagged_IsEq_(a, a)
    r0 = r4
L3:
    if r0 goto L4 else goto L5 :: bool
L4:
    x = 4
    a = 2
    goto L6
L5:
    x = 2
L6:
    return x
(0, 0)   {a}                     {a}
(0, 1)   {a}                     {a}
(0, 2)   {a}                     {a}
(0, 3)   {a}                     {a}
(0, 4)   {a}                     {a}
(1, 0)   {a}                     {a}
(1, 1)   {a}                     {a}
(1, 2)   {a}                     {a}
(2, 0)   {a}                     {a}
(2, 1)   {a}                     {a}
(2, 2)   {a}                     {a}
(3, 0)   {a}                     {a}
(4, 0)   {a}                     {a}
(4, 1)   {a}                     {a}
(4, 2)   {a}                     {a}
(4, 3)   {a}                     {}
(4, 4)   {}                      {}
(5, 0)   {a}                     {a}
(5, 1)   {a}                     {a}
(5, 2)   {a}                     {a}
(6, 0)   {}                      {}

[case testLoop_BorrowedArgument]
def f(a: int) -> int:
    sum = 0
    i = 0
    while i <= a:
        sum = sum + i
        i = i + 1
    return sum
[out]
def f(a):
    a, sum, i :: int
    r0 :: bool
    r1 :: native_int
    r2 :: bool
    r3 :: native_int
    r4, r5, r6, r7, r8 :: bool
    r9, r10 :: int
L0:
    sum = 0
    i = 0
L1:
    r1 = i & 1
    r2 = r1 == 0
    r3 = a & 1
    r4 = r3 == 0
    r5 = r2 & r4
    if r5 goto L2 else goto L3 :: bool
L2:
    r6 = i <= a :: signed
    r0 = r6
    goto L4
L3:
    r7 = CPyTagged_IsLt_(a, i)
    r8 = !r7
    r0 = r8
L4:
    if r0 goto L5 else goto L6 :: bool
L5:
    r9 = CPyTagged_Add(sum, i)
    sum = r9
    r10 = CPyTagged_Add(i, 2)
    i = r10
    goto L1
L6:
    return sum
(0, 0)   {a}                     {a}
(0, 1)   {a}                     {a}
(0, 2)   {a}                     {a}
(0, 3)   {a}                     {a}
(0, 4)   {a}                     {a}
(1, 0)   {a}                     {a}
(1, 1)   {a}                     {a}
(1, 2)   {a}                     {a}
(1, 3)   {a}                     {a}
(1, 4)   {a}                     {a}
(1, 5)   {a}                     {a}
(1, 6)   {a}                     {a}
(1, 7)   {a}                     {a}
(1, 8)   {a}                     {a}
(1, 9)   {a}                     {a}
(2, 0)   {a}                     {a}
(2, 1)   {a}                     {a}
(2, 2)   {a}                     {a}
(3, 0)   {a}                     {a}
(3, 1)   {a}                     {a}
(3, 2)   {a}                     {a}
(3, 3)   {a}                     {a}
(4, 0)   {a}                     {a}
(5, 0)   {a}                     {a}
(5, 1)   {a}                     {a}
(5, 2)   {a}                     {a}
(5, 3)   {a}                     {a}
(5, 4)   {a}                     {a}
(5, 5)   {a}                     {a}
(6, 0)   {a}                     {a}

[case testError]
def f(x: List[int]) -> None: pass # E: Name 'List' is not defined \
                                  # N: Did you forget to import it from "typing"? (Suggestion: "from typing import List")

[case testExceptUndefined_Liveness]
def lol(x: object) -> int:
    try:
        st = id(x)
    except Exception:
        return -1
    return st + 1
[out]
def lol(x):
    x :: object
    r0, st :: int
    r1 :: tuple[object, object, object]
    r2 :: object
    r3 :: str
    r4 :: object
    r5 :: bool
    r6 :: int
    r7 :: bool
    r8, r9 :: int
L0:
L1:
    r0 = CPyTagged_Id(x)
    st = r0
    goto L10
L2:
    r1 = CPy_CatchError()
    r2 = builtins :: module
    r3 = unicode_1 :: static  ('Exception')
    r4 = CPyObject_GetAttr(r2, r3)
    if is_error(r4) goto L8 (error at lol:4) else goto L3
L3:
    r5 = CPy_ExceptionMatches(r4)
    if r5 goto L4 else goto L5 :: bool
L4:
    r6 = CPyTagged_Negate(2)
    CPy_RestoreExcInfo(r1)
    return r6
L5:
    CPy_Reraise()
    if not 0 goto L8 else goto L6 :: bool
L6:
    unreachable
L7:
    CPy_RestoreExcInfo(r1)
    goto L10
L8:
    CPy_RestoreExcInfo(r1)
    r7 = keep_propagating
    if not r7 goto L11 else goto L9 :: bool
L9:
    unreachable
L10:
    r8 = CPyTagged_Add(st, 2)
    return r8
L11:
    r9 = <error> :: int
    return r9
(0, 0)   {x}                     {x}
(1, 0)   {x}                     {r0}
(1, 1)   {r0}                    {st}
(1, 2)   {st}                    {st}
(2, 0)   {}                      {r1}
(2, 1)   {r1}                    {r1, r2}
(2, 2)   {r1, r2}                {r1, r2, r3}
(2, 3)   {r1, r2, r3}            {r1, r4}
(2, 4)   {r1, r4}                {r1, r4}
(3, 0)   {r1, r4}                {r1, r5}
(3, 1)   {r1, r5}                {r1}
(4, 0)   {r1}                    {i0, r1}
(4, 1)   {i0, r1}                {r1, r6}
(4, 2)   {r1, r6}                {r6}
(4, 3)   {r6}                    {}
(5, 0)   {r1}                    {r1}
(5, 1)   {r1}                    {i2, r1}
(5, 2)   {i2, r1}                {r1}
(6, 0)   {}                      {}
(7, 0)   {r1, st}                {st}
(7, 1)   {st}                    {st}
(8, 0)   {r1}                    {}
(8, 1)   {}                      {r7}
(8, 2)   {r7}                    {}
(9, 0)   {}                      {}
(10, 0)  {st}                    {i1, st}
(10, 1)  {i1, st}                {r8}
(10, 2)  {r8}                    {}
(11, 0)  {}                      {r9}
(11, 1)  {r9}                    {}

