[case testForInRange]
def f() -> None:
    x = 0
    for i in range(5):
        x = x + i
[out]
def f():
    x :: int
    r0 :: short_int
    i :: int
    r1 :: bool
    r2 :: int
    r3 :: short_int
L0:
    x = 0
    r0 = 0
    i = r0
L1:
    r1 = r0 < 10 :: signed
    if r1 goto L2 else goto L4 :: bool
L2:
    r2 = CPyTagged_Add(x, i)
    x = r2
L3:
    r3 = r0 + 2
    r0 = r3
    i = r3
    goto L1
L4:
    return 1

[case testForInNegativeRange]
def f() -> None:
    for i in range(10, 0, -1):
        pass
[out]
def f():
    r0 :: short_int
    i :: int
    r1 :: bool
    r2 :: short_int
L0:
    r0 = 20
    i = r0
L1:
    r1 = r0 > 0 :: signed
    if r1 goto L2 else goto L4 :: bool
L2:
L3:
    r2 = r0 + -2
    r0 = r2
    i = r2
    goto L1
L4:
    return 1

[case testBreak]
def f() -> None:
  n = 0
  while n < 5:
      break
[out]
def f():
    n :: int
    r0 :: bool
    r1 :: native_int
    r2 :: bool
    r3 :: native_int
    r4, r5, r6, r7 :: bool
L0:
    n = 0
L1:
    r1 = n & 1
    r2 = r1 == 0
    r3 = 10 & 1
    r4 = r3 == 0
    r5 = r2 & r4
    if r5 goto L2 else goto L3 :: bool
L2:
    r6 = n < 10 :: signed
    r0 = r6
    goto L4
L3:
    r7 = CPyTagged_IsLt_(n, 10)
    r0 = r7
L4:
    if r0 goto L5 else goto L6 :: bool
L5:
L6:
    return 1

[case testBreakFor]
def f() -> None:
    for n in range(5):
        break
[out]
def f():
    r0 :: short_int
    n :: int
    r1 :: bool
    r2 :: short_int
L0:
    r0 = 0
    n = r0
L1:
    r1 = r0 < 10 :: signed
    if r1 goto L2 else goto L4 :: bool
L2:
    goto L4
L3:
    r2 = r0 + 2
    r0 = r2
    n = r2
    goto L1
L4:
    return 1

[case testBreakNested]
def f() -> None:
    n = 0
    while n < 5:
        while n < 4:
            break
        break
[out]
def f():
    n :: int
    r0 :: bool
    r1 :: native_int
    r2 :: bool
    r3 :: native_int
    r4, r5, r6, r7, r8 :: bool
    r9 :: native_int
    r10 :: bool
    r11 :: native_int
    r12, r13, r14, r15 :: bool
L0:
    n = 0
L1:
    r1 = n & 1
    r2 = r1 == 0
    r3 = 10 & 1
    r4 = r3 == 0
    r5 = r2 & r4
    if r5 goto L2 else goto L3 :: bool
L2:
    r6 = n < 10 :: signed
    r0 = r6
    goto L4
L3:
    r7 = CPyTagged_IsLt_(n, 10)
    r0 = r7
L4:
    if r0 goto L5 else goto L12 :: bool
L5:
L6:
    r9 = n & 1
    r10 = r9 == 0
    r11 = 8 & 1
    r12 = r11 == 0
    r13 = r10 & r12
    if r13 goto L7 else goto L8 :: bool
L7:
    r14 = n < 8 :: signed
    r8 = r14
    goto L9
L8:
    r15 = CPyTagged_IsLt_(n, 8)
    r8 = r15
L9:
    if r8 goto L10 else goto L11 :: bool
L10:
L11:
L12:
    return 1

[case testContinue]
def f() -> None:
  n = 0
  while n < 5:
      continue
[out]
def f():
    n :: int
    r0 :: bool
    r1 :: native_int
    r2 :: bool
    r3 :: native_int
    r4, r5, r6, r7 :: bool
L0:
    n = 0
L1:
    r1 = n & 1
    r2 = r1 == 0
    r3 = 10 & 1
    r4 = r3 == 0
    r5 = r2 & r4
    if r5 goto L2 else goto L3 :: bool
L2:
    r6 = n < 10 :: signed
    r0 = r6
    goto L4
L3:
    r7 = CPyTagged_IsLt_(n, 10)
    r0 = r7
L4:
    if r0 goto L5 else goto L6 :: bool
L5:
    goto L1
L6:
    return 1

[case testContinueFor]
def f() -> None:
    for n in range(5):
        continue
[out]
def f():
    r0 :: short_int
    n :: int
    r1 :: bool
    r2 :: short_int
L0:
    r0 = 0
    n = r0
L1:
    r1 = r0 < 10 :: signed
    if r1 goto L2 else goto L4 :: bool
L2:
L3:
    r2 = r0 + 2
    r0 = r2
    n = r2
    goto L1
L4:
    return 1

[case testContinueNested]
def f() -> None:
    n = 0
    while n < 5:
        while n < 4:
            continue
        continue
[out]
def f():
    n :: int
    r0 :: bool
    r1 :: native_int
    r2 :: bool
    r3 :: native_int
    r4, r5, r6, r7, r8 :: bool
    r9 :: native_int
    r10 :: bool
    r11 :: native_int
    r12, r13, r14, r15 :: bool
L0:
    n = 0
L1:
    r1 = n & 1
    r2 = r1 == 0
    r3 = 10 & 1
    r4 = r3 == 0
    r5 = r2 & r4
    if r5 goto L2 else goto L3 :: bool
L2:
    r6 = n < 10 :: signed
    r0 = r6
    goto L4
L3:
    r7 = CPyTagged_IsLt_(n, 10)
    r0 = r7
L4:
    if r0 goto L5 else goto L12 :: bool
L5:
L6:
    r9 = n & 1
    r10 = r9 == 0
    r11 = 8 & 1
    r12 = r11 == 0
    r13 = r10 & r12
    if r13 goto L7 else goto L8 :: bool
L7:
    r14 = n < 8 :: signed
    r8 = r14
    goto L9
L8:
    r15 = CPyTagged_IsLt_(n, 8)
    r8 = r15
L9:
    if r8 goto L10 else goto L11 :: bool
L10:
    goto L6
L11:
    goto L1
L12:
    return 1

[case testForList]
from typing import List

def f(ls: List[int]) -> int:
    y = 0
    for x in ls:
        y = y + x
    return y
[out]
def f(ls):
    ls :: list
    y :: int
    r0 :: short_int
    r1 :: ptr
    r2 :: native_int
    r3 :: short_int
    r4 :: bool
    r5 :: object
    x, r6, r7 :: int
    r8 :: short_int
L0:
    y = 0
    r0 = 0
L1:
    r1 = get_element_ptr ls ob_size :: PyVarObject
    r2 = load_mem r1, ls :: native_int*
    r3 = r2 << 1
    r4 = r0 < r3 :: signed
    if r4 goto L2 else goto L4 :: bool
L2:
    r5 = ls[r0] :: unsafe list
    r6 = unbox(int, r5)
    x = r6
    r7 = CPyTagged_Add(y, x)
    y = r7
L3:
    r8 = r0 + 2
    r0 = r8
    goto L1
L4:
    return y

[case testForDictBasic]
from typing import Dict

def f(d: Dict[int, int]) -> None:
    for key in d:
        d[key]
[out]
def f(d):
    d :: dict
    r0 :: short_int
    r1 :: native_int
    r2 :: short_int
    r3 :: object
    r4 :: tuple[bool, int, object]
    r5 :: int
    r6 :: bool
    r7 :: object
    key, r8 :: int
    r9, r10 :: object
    r11 :: int
    r12, r13 :: bool
L0:
    r0 = 0
    r1 = PyDict_Size(d)
    r2 = r1 << 1
    r3 = CPyDict_GetKeysIter(d)
L1:
    r4 = CPyDict_NextKey(r3, r0)
    r5 = r4[1]
    r0 = r5
    r6 = r4[0]
    if r6 goto L2 else goto L4 :: bool
L2:
    r7 = r4[2]
    r8 = unbox(int, r7)
    key = r8
    r9 = box(int, key)
    r10 = CPyDict_GetItem(d, r9)
    r11 = unbox(int, r10)
L3:
    r12 = CPyDict_CheckSize(d, r2)
    goto L1
L4:
    r13 = CPy_NoErrOccured()
L5:
    return 1

[case testForDictContinue]
from typing import Dict

def sum_over_even_values(d: Dict[int, int]) -> int:
    s = 0
    for key in d:
        if d[key] % 2:
            continue
        s = s + d[key]
    return s
[out]
def sum_over_even_values(d):
    d :: dict
    s :: int
    r0 :: short_int
    r1 :: native_int
    r2 :: short_int
    r3 :: object
    r4 :: tuple[bool, int, object]
    r5 :: int
    r6 :: bool
    r7 :: object
    key, r8 :: int
    r9, r10 :: object
    r11, r12 :: int
    r13 :: bool
    r14 :: native_int
    r15, r16, r17, r18 :: bool
    r19, r20 :: object
    r21, r22 :: int
    r23, r24 :: bool
L0:
    s = 0
    r0 = 0
    r1 = PyDict_Size(d)
    r2 = r1 << 1
    r3 = CPyDict_GetKeysIter(d)
L1:
    r4 = CPyDict_NextKey(r3, r0)
    r5 = r4[1]
    r0 = r5
    r6 = r4[0]
    if r6 goto L2 else goto L9 :: bool
L2:
    r7 = r4[2]
    r8 = unbox(int, r7)
    key = r8
    r9 = box(int, key)
    r10 = CPyDict_GetItem(d, r9)
    r11 = unbox(int, r10)
    r12 = CPyTagged_Remainder(r11, 4)
    r14 = r12 & 1
    r15 = r14 == 0
    if r15 goto L3 else goto L4 :: bool
L3:
    r16 = r12 != 0
    r13 = r16
    goto L5
L4:
    r17 = CPyTagged_IsEq_(r12, 0)
    r18 = !r17
    r13 = r18
L5:
    if r13 goto L6 else goto L7 :: bool
L6:
    goto L8
L7:
    r19 = box(int, key)
    r20 = CPyDict_GetItem(d, r19)
    r21 = unbox(int, r20)
    r22 = CPyTagged_Add(s, r21)
    s = r22
L8:
    r23 = CPyDict_CheckSize(d, r2)
    goto L1
L9:
    r24 = CPy_NoErrOccured()
L10:
    return s

[case testMultipleAssignment]
from typing import Tuple, Any

def from_tuple(t: Tuple[int, str]) -> None:
    x, y = t

def from_any(a: Any) -> None:
    x, y = a
[out]
def from_tuple(t):
    t :: tuple[int, str]
    x :: int
    y :: str
    r0 :: int
    r1 :: str
L0:
    r0 = t[0]
    x = r0
    r1 = t[1]
    y = r1
    return 1
def from_any(a):
    a, x, y, r0, r1 :: object
    r2 :: bool
    r3 :: object
    r4 :: bool
    r5 :: object
    r6 :: bool
L0:
    r0 = PyObject_GetIter(a)
    r1 = PyIter_Next(r0)
    if is_error(r1) goto L1 else goto L2
L1:
    raise ValueError('not enough values to unpack')
    unreachable
L2:
    x = r1
    r3 = PyIter_Next(r0)
    if is_error(r3) goto L3 else goto L4
L3:
    raise ValueError('not enough values to unpack')
    unreachable
L4:
    y = r3
    r5 = PyIter_Next(r0)
    if is_error(r5) goto L6 else goto L5
L5:
    raise ValueError('too many values to unpack')
    unreachable
L6:
    return 1

[case testMultiAssignmentCoercions]
from typing import Tuple, Any

def from_tuple(t: Tuple[int, Any]) -> None:
    x: object
    y: int
    x, y = t

def from_any(a: Any) -> None:
    x: int
    x, y = a
[out]
def from_tuple(t):
    t :: tuple[int, object]
    x :: object
    y, r0 :: int
    r1, r2 :: object
    r3 :: int
L0:
    r0 = t[0]
    r1 = box(int, r0)
    x = r1
    r2 = t[1]
    r3 = unbox(int, r2)
    y = r3
    return 1
def from_any(a):
    a :: object
    x :: int
    y, r0, r1 :: object
    r2 :: bool
    r3 :: int
    r4 :: object
    r5 :: bool
    r6 :: object
    r7 :: bool
L0:
    r0 = PyObject_GetIter(a)
    r1 = PyIter_Next(r0)
    if is_error(r1) goto L1 else goto L2
L1:
    raise ValueError('not enough values to unpack')
    unreachable
L2:
    r3 = unbox(int, r1)
    x = r3
    r4 = PyIter_Next(r0)
    if is_error(r4) goto L3 else goto L4
L3:
    raise ValueError('not enough values to unpack')
    unreachable
L4:
    y = r4
    r6 = PyIter_Next(r0)
    if is_error(r6) goto L6 else goto L5
L5:
    raise ValueError('too many values to unpack')
    unreachable
L6:
    return 1

[case testMultiAssignmentNested]
from typing import Tuple, Any, List

class A:
    x: int

def multi_assign(t: Tuple[int, Tuple[str, Any]], a: A, l: List[str]) -> None:
    z: int
    a.x, (l[0], z) = t
[out]
def multi_assign(t, a, l):
    t :: tuple[int, tuple[str, object]]
    a :: __main__.A
    l :: list
    z, r0 :: int
    r1 :: bool
    r2 :: tuple[str, object]
    r3 :: str
    r4 :: bool
    r5 :: object
    r6 :: int
L0:
    r0 = t[0]
    a.x = r0; r1 = is_error
    r2 = t[1]
    r3 = r2[0]
    r4 = CPyList_SetItem(l, 0, r3)
    r5 = r2[1]
    r6 = unbox(int, r5)
    z = r6
    return 1

[case testAssert]
from typing import Optional

def no_msg(x: bool) -> int:
    assert x
    return 1

def literal_msg(x: object) -> int:
    assert x, 'message'
    return 2

def complex_msg(x: Optional[str], s: str) -> None:
    assert x, s
[out]
def no_msg(x):
    x, r0 :: bool
L0:
    if x goto L2 else goto L1 :: bool
L1:
    raise AssertionError
    unreachable
L2:
    return 2
def literal_msg(x):
    x :: object
    r0, r1 :: bool
L0:
    r0 = bool x :: object
    if r0 goto L2 else goto L1 :: bool
L1:
    raise AssertionError('message')
    unreachable
L2:
    return 4
def complex_msg(x, s):
    x :: union[str, None]
    s :: str
    r0 :: object
    r1 :: bool
    r2 :: str
    r3 :: bool
    r4 :: object
    r5 :: str
    r6, r7 :: object
L0:
    r0 = builtins.None :: object
    r1 = x is not r0
    if r1 goto L1 else goto L2 :: bool
L1:
    r2 = cast(str, x)
    r3 = bool r2 :: object
    if r3 goto L3 else goto L2 :: bool
L2:
    r4 = builtins :: module
    r5 = unicode_3 :: static  ('AssertionError')
    r6 = CPyObject_GetAttr(r4, r5)
    r7 = py_call(r6, s)
    CPy_Raise(r7)
    unreachable
L3:
    return 1

[case testDelList]
def delList() -> None:
    l = [1, 2]
    del l[1]
def delListMultiple() -> None:
    l = [1, 2, 3, 4, 5, 6, 7]
    del l[1], l[2], l[3]
[out]
def delList():
    r0, r1 :: object
    r2, l :: list
    r3 :: object
    r4 :: int32
L0:
    r0 = box(short_int, 2)
    r1 = box(short_int, 4)
    r2 = [r0, r1]
    l = r2
    r3 = box(short_int, 2)
    r4 = PyObject_DelItem(l, r3)
    return 1
def delListMultiple():
    r0, r1, r2, r3, r4, r5, r6 :: object
    r7, l :: list
    r8 :: object
    r9 :: int32
    r10 :: object
    r11 :: int32
    r12 :: object
    r13 :: int32
L0:
    r0 = box(short_int, 2)
    r1 = box(short_int, 4)
    r2 = box(short_int, 6)
    r3 = box(short_int, 8)
    r4 = box(short_int, 10)
    r5 = box(short_int, 12)
    r6 = box(short_int, 14)
    r7 = [r0, r1, r2, r3, r4, r5, r6]
    l = r7
    r8 = box(short_int, 2)
    r9 = PyObject_DelItem(l, r8)
    r10 = box(short_int, 4)
    r11 = PyObject_DelItem(l, r10)
    r12 = box(short_int, 6)
    r13 = PyObject_DelItem(l, r12)
    return 1

[case testDelDict]
def delDict() -> None:
    d = {"one":1, "two":2}
    del d["one"]
def delDictMultiple() -> None:
    d = {"one":1, "two":2, "three":3, "four":4}
    del d["one"], d["four"]
[out]
def delDict():
    r0, r1 :: str
    r2, r3 :: object
    r4, d :: dict
    r5 :: str
    r6 :: int32
L0:
    r0 = unicode_1 :: static  ('one')
    r1 = unicode_2 :: static  ('two')
    r2 = box(short_int, 2)
    r3 = box(short_int, 4)
    r4 = CPyDict_Build(2, r0, r2, r1, r3)
    d = r4
    r5 = unicode_1 :: static  ('one')
    r6 = PyObject_DelItem(d, r5)
    return 1
def delDictMultiple():
    r0, r1, r2, r3 :: str
    r4, r5, r6, r7 :: object
    r8, d :: dict
    r9, r10 :: str
    r11, r12 :: int32
L0:
    r0 = unicode_1 :: static  ('one')
    r1 = unicode_2 :: static  ('two')
    r2 = unicode_3 :: static  ('three')
    r3 = unicode_4 :: static  ('four')
    r4 = box(short_int, 2)
    r5 = box(short_int, 4)
    r6 = box(short_int, 6)
    r7 = box(short_int, 8)
    r8 = CPyDict_Build(4, r0, r4, r1, r5, r2, r6, r3, r7)
    d = r8
    r9 = unicode_1 :: static  ('one')
    r10 = unicode_4 :: static  ('four')
    r11 = PyObject_DelItem(d, r9)
    r12 = PyObject_DelItem(d, r10)
    return 1

[case testDelAttribute]
class Dummy():
    def __init__(self, x: int, y: int) -> None:
        self.x = x
        self.y = y
def delAttribute() -> None:
    dummy = Dummy(1, 2)
    del dummy.x
def delAttributeMultiple() -> None:
    dummy = Dummy(1, 2)
    del dummy.x, dummy.y
[out]
def Dummy.__init__(self, x, y):
    self :: __main__.Dummy
    x, y :: int
    r0, r1 :: bool
L0:
    self.x = x; r0 = is_error
    self.y = y; r1 = is_error
    return 1
def delAttribute():
    r0, dummy :: __main__.Dummy
    r1 :: str
    r2 :: int32
L0:
    r0 = Dummy(2, 4)
    dummy = r0
    r1 = unicode_3 :: static  ('x')
    r2 = PyObject_DelAttr(dummy, r1)
    return 1
def delAttributeMultiple():
    r0, dummy :: __main__.Dummy
    r1 :: str
    r2 :: int32
    r3 :: str
    r4 :: int32
L0:
    r0 = Dummy(2, 4)
    dummy = r0
    r1 = unicode_3 :: static  ('x')
    r2 = PyObject_DelAttr(dummy, r1)
    r3 = unicode_4 :: static  ('y')
    r4 = PyObject_DelAttr(dummy, r3)
    return 1

[case testForEnumerate]
from typing import List, Iterable

def f(a: List[int]) -> None:
    for i, x in enumerate(a):
        i + x
def g(x: Iterable[int]) -> None:
    for i, n in enumerate(x):
        pass
[out]
def f(a):
    a :: list
    r0 :: short_int
    i :: int
    r1 :: short_int
    r2 :: ptr
    r3 :: native_int
    r4 :: short_int
    r5 :: bool
    r6 :: object
    x, r7, r8 :: int
    r9, r10 :: short_int
L0:
    r0 = 0
    i = 0
    r1 = 0
L1:
    r2 = get_element_ptr a ob_size :: PyVarObject
    r3 = load_mem r2, a :: native_int*
    r4 = r3 << 1
    r5 = r1 < r4 :: signed
    if r5 goto L2 else goto L4 :: bool
L2:
    r6 = a[r1] :: unsafe list
    r7 = unbox(int, r6)
    x = r7
    r8 = CPyTagged_Add(i, x)
L3:
    r9 = r0 + 2
    r0 = r9
    i = r9
    r10 = r1 + 2
    r1 = r10
    goto L1
L4:
L5:
    return 1
def g(x):
    x :: object
    r0 :: short_int
    i :: int
    r1, r2 :: object
    r3, n :: int
    r4 :: short_int
    r5 :: bool
L0:
    r0 = 0
    i = 0
    r1 = PyObject_GetIter(x)
L1:
    r2 = PyIter_Next(r1)
    if is_error(r2) goto L4 else goto L2
L2:
    r3 = unbox(int, r2)
    n = r3
L3:
    r4 = r0 + 2
    r0 = r4
    i = r4
    goto L1
L4:
    r5 = CPy_NoErrOccured()
L5:
    return 1

[case testForZip]
from typing import List, Iterable

def f(a: List[int], b: Iterable[bool]) -> None:
    for x, y in zip(a, b):
        if b:
            x = 1

def g(a: Iterable[bool], b: List[int]) -> None:
    for x, y, z in zip(a, b, range(5)):
        x = False
[out]
def f(a, b):
    a :: list
    b :: object
    r0 :: short_int
    r1 :: object
    r2 :: ptr
    r3 :: native_int
    r4 :: short_int
    r5 :: bool
    r6, r7 :: object
    x, r8 :: int
    r9, y, r10 :: bool
    r11 :: short_int
    r12 :: bool
L0:
    r0 = 0
    r1 = PyObject_GetIter(b)
L1:
    r2 = get_element_ptr a ob_size :: PyVarObject
    r3 = load_mem r2, a :: native_int*
    r4 = r3 << 1
    r5 = r0 < r4 :: signed
    if r5 goto L2 else goto L7 :: bool
L2:
    r6 = PyIter_Next(r1)
    if is_error(r6) goto L7 else goto L3
L3:
    r7 = a[r0] :: unsafe list
    r8 = unbox(int, r7)
    x = r8
    r9 = unbox(bool, r6)
    y = r9
    r10 = bool b :: object
    if r10 goto L4 else goto L5 :: bool
L4:
    x = 2
L5:
L6:
    r11 = r0 + 2
    r0 = r11
    goto L1
L7:
    r12 = CPy_NoErrOccured()
L8:
    return 1
def g(a, b):
    a :: object
    b :: list
    r0 :: object
    r1, r2 :: short_int
    z :: int
    r3 :: object
    r4 :: ptr
    r5 :: native_int
    r6 :: short_int
    r7, r8, r9, x :: bool
    r10 :: object
    y, r11 :: int
    r12, r13 :: short_int
    r14 :: bool
L0:
    r0 = PyObject_GetIter(a)
    r1 = 0
    r2 = 0
    z = r2
L1:
    r3 = PyIter_Next(r0)
    if is_error(r3) goto L6 else goto L2
L2:
    r4 = get_element_ptr b ob_size :: PyVarObject
    r5 = load_mem r4, b :: native_int*
    r6 = r5 << 1
    r7 = r1 < r6 :: signed
    if r7 goto L3 else goto L6 :: bool
L3:
    r8 = r2 < 10 :: signed
    if r8 goto L4 else goto L6 :: bool
L4:
    r9 = unbox(bool, r3)
    x = r9
    r10 = b[r1] :: unsafe list
    r11 = unbox(int, r10)
    y = r11
    x = 0
L5:
    r12 = r1 + 2
    r1 = r12
    r13 = r2 + 2
    r2 = r13
    z = r13
    goto L1
L6:
    r14 = CPy_NoErrOccured()
L7:
    return 1
